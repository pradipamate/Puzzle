{"version":3,"sources":["App.js","practice/actions/PuzzleAction.js","serviceWorker.js","practice/reducers/PuzzleReducer.js","practice/reducers/Rootreducer.js","index.js","practice/store/store.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickhandler","bind","assertThisInitialized","dispatch","data","type","payload","initialData","_this2","Datafetch","DataFetch","undefined","List","map","item","react_default","a","createElement","className","md","onClick","Container","fluid","Row","Component","connect","state","Boolean","window","location","hostname","match","combineReducers","arguments","length","action","objectSpread","solve_puzzle","sort","store","createStore","rootreducer","applyMiddleware","thunk","jsx","es","src_App","console","log","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAMMA,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAKDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KANLA,mFAUfG,KAAKJ,MAAMW,SChBZ,WACN,IAAMC,EAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC3B,OAAQ,SAAAD,GACDA,EAAS,CAAEE,KAAK,mBAAoBC,QAAQF,KDa3BG,2CAGpBX,KAAKJ,MAAMW,SCXP,SAAAA,GACDA,EAAS,CAAEE,KAAK,kDDad,IAAAG,EAAAZ,KAGCQ,EADOR,KAAKJ,MAAMiB,UACRC,UACd,QAAWC,IAARP,EACF,IAAIQ,EAAKR,EAAKS,IAAI,SAACC,GAAD,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAYC,GAAG,KACxBJ,EAAAC,EAAAC,cAAA,QAAMG,QAASZ,EAAKR,cAAec,MAIhD,OACIC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAWC,OAAO,GACZP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVN,aAjCXY,aA+CHC,cALS,SAAAC,GACpB,MAAO,CACHjB,UAAWiB,EAAMhB,YAGVe,CAAyBlC,GEzCpBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sFClBArB,EAAY,GCGHsB,cAAgB,CAC3BtB,UDFW,WAA+B,IAA9BgB,EAA8BO,UAAAC,OAAA,QAAAvB,IAAAsB,UAAA,GAAAA,UAAA,GAAtBvB,EAAWyB,EAAWF,UAAAC,OAAA,EAAAD,UAAA,QAAAtB,EAC1C,OAAQwB,EAAO9B,MACX,IAAK,mBACD,OAAOX,OAAA0C,EAAA,EAAA1C,CAAA,GACAgC,EADP,CACahB,UAAUyB,EAAO7B,UAElC,IAAK,aACF,IAAI+B,EAAcX,EAAMhB,UAAW4B,OAClC,OAAO5C,OAAA0C,EAAA,EAAA1C,CAAA,GACAgC,EADP,CACahB,UAAU2B,IAE3B,QACI,OAAOX,MENba,ECFYC,YAAYC,EAAYC,YAAgBC,MDIpDC,EACF7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAUN,MAAOA,GACdxB,EAAAC,EAAAC,cAAC6B,EAAD,OAGPC,QAAQC,IAAIT,EAAMU,YAClBC,IAASC,OAAOP,EAAKQ,SAASC,eAAe,SHiHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9ee20cac.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {initialData,solvePuzzle} from \"./practice/actions/PuzzleAction\";\nimport {Col,Row,Container} from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        //   this.state ={\n        //         puzzle: null,\n        //         data:null\n        //     };\n        this.clickhandler = this.clickhandler.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.dispatch(initialData());\n    }\n    clickhandler() {\n        this.props.dispatch(solvePuzzle());\n    }\n    \n    render() {  \n     \n          var Data = this.props.Datafetch;\n          var data=Data.DataFetch;\n          if(data !==undefined){\n           var List=data.map((item)=>\n               <div className=\"GameCell\"  md=\"3\"> \n                     <span onClick={this.clickhandler}>{item}</span>\n                </div>\n            )\n          }\n        return (\n            <div>\n              <Container fluid={true}>\n                    <Row>\n                        <div className=\"GameDiv\">\n                            {List}\n                         </div>\n                      </Row>\n               </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        Datafetch: state.DataFetch\n    };\n};\nexport default connect(mapStateToProps)(App);\n","\r\nexport function initialData() {\r\n const data = [8,1,2,4,5,6,0,3,7];\r\n    return  dispatch =>{\r\n           dispatch({ type:\"TEST_RANDOM_DATA\", payload:data});\r\n    }\r\n}\r\n\r\nexport function solvePuzzle() {\r\n    return  dispatch =>{\r\n           dispatch({ type:\"SOLVE_DATA\"});\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const DataFetch = [];\r\n\r\nexport default (state = DataFetch, action) => {\r\n    switch (action.type) {\r\n        case 'TEST_RANDOM_DATA':\r\n            return {\r\n                ...state,DataFetch:action.payload,\r\n            }\r\n        case 'SOLVE_DATA':\r\n           var solve_puzzle=(state.DataFetch).sort();\r\n            return {\r\n                ...state,DataFetch:solve_puzzle,\r\n            }\r\n        default:\r\n            return state;\r\n     }\r\n}","import PuzzleReducer from './PuzzleReducer';\r\nimport {combineReducers} from 'redux';\r\n\r\nexport default combineReducers({\r\n    DataFetch:PuzzleReducer\r\n\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Mystore from './practice/store/store';\nimport {Provider} from 'react-redux';\n\nconst store = Mystore();\n\nconst jsx= (\n    <Provider store={store}>\n       <App />          \n    </Provider>\n)\nconsole.log(store.getState())\nReactDOM.render(jsx, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// const element=<h1>welcome to Website</h1>\n\n// ReactDOM.render(element,document.getElementById('root'));","import {createStore,combineReducers,applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootreducer from '../reducers/Rootreducer';\r\n\r\n\r\nexport default()=>{\r\n    const store = createStore(rootreducer,applyMiddleware(thunk));\r\n    return store;\r\n}\r\n\r\n"],"sourceRoot":""}